{"version":3,"sources":["SocialService.js","DataService.js","Snowflake.js","App.js","serviceWorker.js","index.js"],"names":["SocialService","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","onRef","loadFbLoginApi","undefined","window","fbAsyncInit","FB","init","appId","cookie","xfbml","version","console","log","d","s","id","js","fjs","getElementsByTagName","getElementById","createElement","src","parentNode","insertBefore","document","obj","ui","method","action_type","action_properties","JSON","stringify","object","title","link","description","image","hashtag","response","error_message","alert","api","name","innerHTML","Component","DataService","dataURI","byteString","atob","split","ab","ArrayBuffer","length","ia","Uint8Array","i","charCodeAt","Blob","type","Snowflake","setupVariables","setupCanvas","setupSnowflake","refresh","_context","scale","_scale","drawSnowflake","setTransform","_canvas","width","height","_words","drawWords","_getSavableData","focus","setState","getImageData","toDataURL","getContext","_devicePixelRatio","_maxD","_sides","_angle","Math","PI","_spark","_color","_maxStroke","_sparkVar","r","n","y","yy","h","_spark2Var","w","_distance","_sparkShort","_index","_spW","_temp","_strokes","translate","maxW","random","num","getStrokeWidth","strings","color","value","lineCap","shadowBlur","shadowColor","save","font","fillStyle","textAlign","fillText","restore","fillRect","beginPath","moveTo","lineTo","_r","rotate","lineWidth","strokeStyle","stroke","closePath","drawSegment","context","segmentLength","branchLength","drawBranch","direction","react_default","a","Fragment","SliderWithTooltip","createSliderWithTooltip","Slider","App","handleRegenerateClick","e","snowflake","regenerate","handleFacebookClick","shareToFB","handleColorChange","event","setColor","hex","handleTextChange","setWords","target","toString","handleSidesSlider","setSides","handleStrokeSlider","setStroke","handleScaleChange","setScale","bind","assertThisInitialized","sides","_imageData","_imageBlob","dataservice","dataURItoBlob","_this2","CssBaseline_default","src_SocialService","ref","socialservice","src_DataService","Grid_default","container","justify","alignItems","src_Snowflake_0","className","min","max","defaultValue","onChange","lib","TextField_default","helperText","fullWidth","variant","Button_default","onClick","Boolean","location","hostname","match","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c0ed3372.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass SocialService extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {};\n    }\n    \n    componentDidMount() {\n        this.props.onRef(this);\n        this.loadFbLoginApi();\n    }\n\n    componentWillUnmount() {\n        this.props.onRef(undefined);\n    }\n\n    loadFbLoginApi() {\n        window.fbAsyncInit = function () {\n            window.FB.init({\n                appId: 1972746216113193,\n                cookie: true, // enable cookies to allow the server to access\n                // the session\n                xfbml: true, // parse social plugins on this page\n                version: 'v3.2'\n            });\n        };\n\n        console.log(\"Loading fb api\");\n        // Load the SDK asynchronously\n        (function (d, s, id) {\n            var js, fjs = d.getElementsByTagName(s)[0];\n            if (d.getElementById(id)) return;\n            js = d.createElement(s);\n            js.id = id;\n            js.src = \"//connect.facebook.net/en_US/sdk.js\";\n            fjs.parentNode.insertBefore(js, fjs);\n        }(document, 'script', 'facebook-jssdk'));\n    }\n\n    displayFbDialogue(obj) {\n        window.FB.ui(\n        {\n            method: 'share_open_graph',\n            action_type: 'og.likes',\n            action_properties: JSON.stringify({\n                object: {\n                    title: \"Redsnow - Snowflake Maker\",\n                    link: \"http://redsnow.ca\",\n                    description: \"Come Create Your Own Unique Snowflake! Check us out at redsnow.ca\",\n                    image: \"http://hwlo.ca/images/projects/farmoo/farm.PNG\"\n                }\n            }),\n            hashtag: \"#redsnow\"\n        },\n        // callback\n        function(response) {\n            if (response && !response.error_message) {\n                alert('Posting completed.');\n            } else {\n                alert('Error while posting.');\n            }\n        });\n    }\n\n    testAPI() {\n        console.log('Welcome!  Fetching your information.... ');\n        window.FB.api('/me', function(response) {\n            console.log('Successful login for: ' + response.name);\n            document.getElementById('status').innerHTML = 'Thanks for logging in, ' + response.name + '!';\n        });\n    }\n\n    render() {\n        return (\"\");\n    }\n\n}\n\nexport default SocialService;","import React, { Component } from 'react';\n\nclass DataService extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {};\n    }\n\n    componentDidMount() {\n        this.props.onRef(this);\n    }\n\n    componentWillUnmount() {\n        this.props.onRef(undefined);\n    }\n\n    dataURItoBlob(dataURI) {\n        let byteString = atob(dataURI.split(',')[1]);\n        let ab = new ArrayBuffer(byteString.length);\n        let ia = new Uint8Array(ab);\n        for (let i = 0; i < byteString.length; i++) {\n            ia[i] = byteString.charCodeAt(i);\n        }\n        return new Blob([ab], {type: 'image/png'});\n    }\n\n    render() {\n        return (\"\");\n    }\n}\n\nexport default DataService;","import React, { Component } from 'react';\nimport './Snowflake.css';\n\nclass Snowflake extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            image: null\n        }\n    }\n\n    componentDidMount() {\n        this.props.onRef(this);\n\n        this.setupVariables();\n        this.setupCanvas();\n        this.setupSnowflake();\n\n        this.refresh();\n    }\n\n    componentWillUnmount() {\n        this.props.onRef(undefined);\n    }\n\n    regenerate() {\n        this.setupSnowflake();\n        this.refresh();\n    }\n\n    refresh() {\n        this._context.scale(this._scale, this._scale);\n        this.drawSnowflake();\n        this._context.setTransform(1, 0, 0, 1, this._canvas.width/2, this._canvas.height/2);\n\n        if (this._words.length > 0) {\n            this.drawWords();\n        }\n\n        this._getSavableData();\n    }\n\n    _getSavableData() {\n        document.getElementById(\"canvas-image\").focus();\n        this.setState({image: this.getImageData()});\n    }\n\n    getImageData() {\n        return this._canvas.toDataURL(\"image/png;base64;\");\n    }\n\n    setupVariables() {\n        this._canvas = document.getElementById(\"snowflake-canvas\");\n        this._context = this._canvas.getContext(\"2d\");\n\n        //default thingies\n        this._devicePixelRatio = 1;\n        this._maxD = this._canvas.height;\n        this._sides = 6;\n        this._angle = 2*Math.PI/this._sides;\n        this._spark = 50;\n        this._color = \"#FFFFFF\";\n        this._maxStroke = 50;\n\n        this._words = \"\";\n        this._scale = 1;\n\n        this._sparkVar = {\n            r: 0,\n            n: 0,\n            y: 0,\n            yy: 0,\n            h: 0\n        };\n\n        this._spark2Var = {\n            r: 0,\n            n: 0,\n            y: 0,\n            w: 0,\n            h: 0\n        }\n\n        this._distance = 0;\n        this._sparkShort = 0;\n        this._index = 0;\n\n        this._spW = [];\n        this._temp = 0;\n\n        //stroke setup\n        this._strokes = [];\n    }\n\n    setupCanvas() {\n        this._canvas.width = 480;\n        this._canvas.height = 480;\n\n        this._context.translate(this._canvas.width/2, this._canvas.height/2);\n        \n        //set max width of snowflake to the smallest canvas side\n        this._maxD = this._canvas.height - 30;\n        \n        this._maxD /= 5;\n    }\n\n    getStrokeWidth(maxW) {\n        return Math.random() * (maxW / 20) + 0.4;\n    }\n\n    setStroke(num) {\n        this._maxStroke = num;\n        for (let i=0; i < 4; i++) {\n            this._strokes[i] = this.getStrokeWidth(this._maxStroke);\n        }\n        this.refresh();\n    }\n\n    setSides(num) {\n        this._sides = num;\n        this._angle = 2*Math.PI/this._sides;\n        this.refresh();\n    }\n\n    setWords(strings) {\n        this._words = strings;\n        this.refresh();\n    }\n\n    setColor(color) {\n        this._color = color;\n        this.refresh();\n    }\n\n    setScale(value) {\n        this._scale = value;\n        this.refresh();\n    }\n\n    setupSnowflake() {\n        //main arms\n        this._sparkVar.r = (Math.random() * this._maxD) + this._maxD; // main sparks\n        this._sparkVar.y = Math.random() * this._sparkVar.r; // y of first spark\n        this._sparkVar.yy = Math.random() * this._sparkVar.r; // y of last spark\n        this._sparkVar.h = Math.random() * this._spark; // height of sparks\n        this._distance = this._sparkVar.yy - this._sparkVar.y;\n\n        //distance between sparks\n        if (this._distance > 0) {\n            this._distance = (this._sparkVar.yy - this._sparkVar.y) / this._sparkVar.n;\n        } else {\n            this._distance = (this._sparkVar.y - this._sparkVar.yy) / this._sparkVar.n;\n            this._temp = this._sparkVar.y;\n            this._sparkVar.y = this._sparkVar.yy;\n            this._sparkVar.yy = this._temp;\n        }\n\n        //width of sparks\n        for (let i=0; i < this._sparkVar.n; i++) {\n            this._spW[i] = Math.random() * this._spark;\n        }\n\n        // short arms\n        this._spark2Var.r = Math.random() * this._sparkVar.r; // shorter than main\n        this._spark2Var.y = Math.random() * this._spark2Var.r;\n        this._spark2Var.w = Math.random() * this._spark;\n        this._spark2Var.h = (Math.random() * (this._spark * 2)) - this._spark;\n        this._sparkShort = Math.random() * 6; // 1 in 6 chance of shorts not showing\n\n        //different stroke widths for each path\n        for (let i=0; i < 4; i++) {\n            this._strokes[i] = this.getStrokeWidth(this._maxStroke);\n        }\n        this._context.lineCap = \"round\";\n\n        this._context.shadowBlur = 50;\n        this._context.shadowColor = this._color;\n    }\n\n    drawWords() {\n        this._context.save();\n        this._context.shadowBlur = 0;\n        this._context.font = \"40px Courier\";\n        this._context.fillStyle = this._color;\n        this._context.textAlign = \"center\"; \n        this._context.fillText(this._words, 0, this._canvas.height / 3);\n        this._context.restore();\n    }\n\n    drawSnowflake() {\n        //clear\n        this._context.scale(1, 1);\n        this._context.fillStyle = \"#336666\";\n        this._context.fillRect(\n            -this._canvas.width / 2,\n            -this._canvas.height / 2,\n            this._canvas.width,\n            this._canvas.height\n        );\n\n        this._context.beginPath();\n        this._context.moveTo(0, 0);\n        this._context.save();\n        \n        //Blur\n        this._context.shadowBlur = 50;\n        this._context.shadowColor = \"#FFFFFF\";\n        for (let i=0; i < this._sides; i++) {\n            this._context.moveTo(0, 0);\n            this._context.lineTo(0, this._r);\n            this._context.rotate(this._angle);\n        }\n\n        this._context.restore();\n\n        this._context.lineWidth = this._strokes[0];\n        this._context.strokeStyle = this._color;\n        this._context.stroke();\n        this._context.closePath();\n\n        //Base\n        this._context.save();\n        \n        for (let i=0; i < this._sides; i++) {\n            this._context.beginPath();\n            this._context.moveTo(0,0);\n            this._context.lineTo(this._maxD,0);\n            this._context.lineWidth = this._strokes[1];\n            this._context.strokeStyle = this._color;\n            this._context.stroke();\n            this._context.rotate(this._angle);\n            this._context.closePath();\n        }\n        this._context.restore();\n\n        //Large sparks\n        // this._context.beginPath();\n        // this._context.moveTo(0, 0);\n        // this._context.save();\n\n        // for (let i=0; i < this._sides; i++) {\n        //     this._context.moveTo(0, 0);\n        //     this._index = this._sparkVar.y;\n\n        //     for (let j=0; j < this._sparkVar.n; j++) {\n        //         this._context.moveTo(-this._spW[j], this._index + this._sparkVar.h);\n        //         this._context.lineTo(0, this._index);\n        //         this._context.lineTo(this._spW[j], this._index + this._sparkVar.h);\n        //         this._index += this._distance;\n        //     }\n\n        //     this._context.rotate(this._angle);\n        // }\n        // this._context.restore();\n\n        // this._context.lineWidth = this._strokes[1];\n        // this._context.strokeStyle = this._color;\n        // this._context.stroke();\n        // this._context.closePath();\n\n        // //short arms\n        // this._context.beginPath();\n        // this._context.moveTo(0, 0);\n        // this._context.save();\n        // this._context.rotate(this._angle/2);\n\n        // for (let i=0; i < this._sides; i++) {\n        //     this._context.moveTo(0, 0);\n        //     this._context.lineTo(0, this._spark2Var.r);\n        //     this._context.rotate(this._angle);\n        // }\n        // this._context.restore();\n\n        // this._context.lineWidth = this._strokes[2];\n        // this._context.strokeStyle = this._color;\n        // this._context.stroke();\n        // this._context.closePath();\n\n        // //short spark\n        // this._context.beginPath();\n        // this._context.moveTo(0, 0);\n        // this._context.save();\n\n        // for (let i=0; i < this._sides; i++) {\n        //     this._context.moveTo(-this._spark2Var.w, this._spark2Var.y + this._spark2Var.h);\n        //     this._context.lineTo(0, this._spark2Var.y);\n        //     this._context.lineTo(this._spark2Var.w, this._spark2Var.y + this._spark2Var.h);\n        //     this._context.rotate(this._angle);\n        // }\n        // this._context.restore();\n\n        // this._context.lineWidth = this._strokes[3];\n        // this._context.strokeStyle = this._color;\n        // this._context.stroke();\n        // this._context.closePath();\n\n        for (let i=0; i < this._sides; i++) {\n            this._context.save();     \n            this.drawSegment(this._context, this._maxD / 3, this._sparkVar.h);\n            this.drawSegment(this._context, this._maxD / 3, this._spark2Var.h);\n            this.drawSegment(this._context, this._maxD / 3, 0);\n            this._context.restore();\n            this._context.rotate(this._angle);\n        }\n    }\n\n    drawSegment(context, segmentLength, branchLength) {\n        context.beginPath();\n        context.moveTo(0,0);\n        context.lineTo(segmentLength,0);\n        context.stroke();\n        context.translate(segmentLength,0);\n        if (branchLength > 0) {\n            this.drawBranch(context, branchLength, 1);\n            this.drawBranch(context, branchLength, -1);\n        }\n    }\n     \n    drawBranch(context, branchLength, direction) {\n        context.save();\n        context.rotate(direction*Math.PI/3);\n        context.moveTo(0,0);\n        context.lineTo(branchLength,0);\n        context.stroke();\n        context.restore();\n    }\n    \n\n    render() {\n        return (\n            <React.Fragment>\n                <canvas id=\"snowflake-canvas\"></canvas>\n                <img id=\"canvas-image\" src={this.state.image}></img>\n            </React.Fragment>\n        )\n    }\n}\n\nexport default Snowflake;","import React, { Component } from 'react';\nimport 'rc-slider/assets/index.css';\n\n/* Style */\nimport Slider, { createSliderWithTooltip } from 'rc-slider';\nimport { CirclePicker } from 'react-color';\nimport Button from '@material-ui/core/Button';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport Grid from '@material-ui/core/Grid';\nimport TextField from '@material-ui/core/TextField';\nimport './App.css';\n\n/* Other Components */\nimport SocialService from './SocialService';\nimport DataService from './DataService';\nimport Snowflake from './Snowflake';\n\nconst SliderWithTooltip = createSliderWithTooltip(Slider);\n\nfunction log(value) {\n  console.log(value); //eslint-disable-line\n}\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleColorChange = this.handleColorChange.bind(this);\n    this.handleRegenerateClick = this.handleRegenerateClick.bind(this);\n    this.handleFacebookClick = this.handleFacebookClick.bind(this);\n    this.handleSidesSlider = this.handleSidesSlider.bind(this);\n    this.handleStrokeSlider = this.handleStrokeSlider.bind(this);\n    this.handleTextChange = this.handleTextChange.bind(this);\n    this.handleScaleChange = this.handleScaleChange.bind(this);\n\n    this.state = {\n      sides: 6\n    }\n  }\n\n  handleRegenerateClick = (e) => {\n    this.snowflake.regenerate();\n  }\n\n  handleFacebookClick = (e) => {\n    this.shareToFB();\n  }\n\n  shareToFB() {\n    this._imageData = this.snowflake.getImageData();\n    this._imageBlob = this.dataservice.dataURItoBlob(this._imageData);\n    console.log(this._imageBlob);\n  }\n\n  handleColorChange = (color, event) => {\n    this.snowflake.setColor(color.hex);\n  }\n\n  handleTextChange = (event) => {\n    this.snowflake.setWords(event.target.value.toString());\n  }\n\n  handleSidesSlider = (value) => {\n    this.snowflake.setSides(value);\n  }\n\n  handleStrokeSlider = (value) => {\n    this.snowflake.setStroke(value);\n  }\n\n  handleScaleChange = (value) => {\n    this.snowflake.setScale(value);\n  }\n\n  render() {\n    return (\n      <React.Fragment>\n        <CssBaseline />\n        <SocialService onRef={ref => (this.socialservice = ref)}/>\n        <DataService onRef={ref => (this.dataservice = ref)}/>\n\n        <Grid container direction=\"column\" justify=\"flex-start\" alignItems=\"center\">\n          <div id=\"header\">Redsnow - Snowflake Maker</div>\n          <div id=\"sub-header\"><em>You can right click to save the image.</em></div>\n          <Snowflake onRef={ref => (this.snowflake = ref)}/>\n          <div id=\"modifierContainer\">\n            <div className=\"modifier\">\n              <label>COMPEXITY :</label>\n              <SliderWithTooltip min={1} max={12} defaultValue={6} onChange={this.handleSidesSlider} />\n            </div>\n            <div className=\"modifier\">\n            <label>STROKE WIDTH :</label>\n              <SliderWithTooltip min={1} max={100} defaultValue={50} onChange={this.handleStrokeSlider}/>\n            </div>\n            <div className=\"modifier\">\n            <label>COLOR :</label>\n              <CirclePicker width=\"100%\" onChange={this.handleColorChange}/>\n            </div>\n            <div className=\"modifier\">\n              <label>SCALE :</label>\n              <SliderWithTooltip min={1} max={3} defaultValue={1} onChange={this.handleScaleChange}/>\n            </div>\n\n          </div>\n          <div id=\"textfieldContainer\">\n            <TextField name=\"words\" helperText=\"Describe your snowflake here...\" fullWidth={true} variant=\"outlined\" onChange={this.handleTextChange}></TextField>\n          </div>\n          <div id=\"button-container\">\n            <Button color=\"secondary\" onClick={this.handleRegenerateClick}>GENERATE AGAIN</Button>\n            <Button color=\"primary\" onClick={this.handleFacebookClick}>FACEBOOK</Button>\n          </div>\n        </Grid>\n      </React.Fragment>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}